import asyncio
import logging
from client import client as cl
from saint import client_sait as sc
from database import data_base
from create_bot import dp, bot, Chat
from admin import admin
from aiogram.methods import DeleteWebhook
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram import types


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
data_base.creat_teble()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–æ–≤
dp.include_router(cl.router_client)
dp.include_router(sc.router_client_sait)
dp.include_router(admin.router_admin)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
# scheduler = AsyncIOScheduler(timezone="Europe/Moscow")
# scheduler.add_job(cl.time_send, trigger='cron', hour=2, minute=1, kwargs={'bot': bot})
# scheduler.start()

# async def time_send():
#     """
#     –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç —Å –∫–Ω–æ–ø–∫–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –±–æ—Ç.
#     """
#     text = '–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫!\n–Ø –±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ –º–Ω–µ –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è. üìü'
#     keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
#         [types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É", url="https://t.me/radiolira_bot")]
#     ])
#     await bot.send_message(chat_id=Chat.chat_id, text=text, reply_markup=keyboard)

async def start():
    try:
        await dp.start_polling(bot)
        await bot(DeleteWebhook(drop_pending_updates=True))
    except Exception as e:
        logging.error(f"An error occurred: {e}")
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(start())